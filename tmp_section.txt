        # Avatar files are in parent directory (MSS/avatars)
        avatars_dir = Path(__file__).parent.parent / "avatars"
        return send_from_directory(avatars_dir, filename)
    except Exception as e:
        return jsonify({'error': str(e)}), 404


@app.route('/intro_outro/<path:filename>', methods=['GET'])
def serve_intro_outro_file(filename):
    """Serve files from the intro_outro directory"""
    try:
        intro_outro_dir = Path("intro_outro").absolute()
        return send_from_directory(intro_outro_dir, filename)
    except Exception as e:
        return jsonify({'error': str(e)}), 404


@app.route('/logos/<path:filename>', methods=['GET'])
def serve_logo_file(filename):
    """Serve logo files. Prefer ./logos, then ./web/logos."""
    try:
        for d in [Path('logos').absolute(), (Path(__file__).parent / 'logos').absolute()]:
            f = d / filename
            if f.exists():
                return send_from_directory(d, filename)
        return jsonify({'error': 'Logo not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 404


@app.route('/api/logo-files', methods=['GET'])
def api_logo_files():
    """Return list of logo files from ./logos and ./web/logos.
    Response: { success, logos: [ { filename, url, size } ] }
    """
    try:
        dirs = [Path('logos'), Path(__file__).parent / 'logos']
        items = []
        seen = set()
        for d in dirs:
            if not d.exists():
                continue
            for ext in ('*.png', '*.jpg', '*.jpeg', '*.svg', '*.webp'):
                for f in d.glob(ext):
                    if f.name in seen:
                        continue
                    seen.add(f.name)
                    try:
                        items.append({
                            'filename': f.name,
                            'url': f"http://localhost:5000/logos/{f.name}",
                            'size': f.stat().st_size,
                        })
                    except Exception:
                        pass
        # Sort by most recent mtime
        def _mtime(name: str) -> float:
            for d in dirs:
                p = d / name
                if p.exists():
                    return p.stat().st_mtime
            return 0.0
        items.sort(key=lambda x: _mtime(x['filename']), reverse=True)
        return jsonify({'success': True, 'logos': items})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/thumbnails/<path:filename>', methods=['GET'])
def serve_thumbnail_file(filename):
    """Serve files from the thumbnails directory"""
    try:
        thumbnails_dir = Path("thumbnails").absolute()
        return send_from_directory(thumbnails_dir, filename)
    except Exception as e:
        return jsonify({'error': str(e)}), 404


@app.route('/get-intro-outro-library', methods=['GET'])
def get_intro_outro_library():
    """Get all saved intros and outros"""
